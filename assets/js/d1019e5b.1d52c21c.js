"use strict";(self.webpackChunkjunjiezhou=self.webpackChunkjunjiezhou||[]).push([[5262],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return g}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),m=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=m(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},l=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=m(r),g=o,d=l["".concat(s,".").concat(g)]||l[g]||p[g]||i;return r?t.createElement(d,a(a({ref:n},c),{},{components:r})):t.createElement(d,a({ref:n},c))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=l;var u={};for(var s in n)hasOwnProperty.call(n,s)&&(u[s]=n[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var m=2;m<i;m++)a[m]=r[m];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}l.displayName="MDXCreateElement"},6982:function(e,n,r){r.r(n),r.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return p}});var t=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],u={sidebar_position:4},s="Guessing Game Example Code",m={unversionedId:"rust-programming/Guessing-Game-Example-Code",id:"rust-programming/Guessing-Game-Example-Code",title:"Guessing Game Example Code",description:"",source:"@site/docs/rust-programming/3_Guessing-Game-Example-Code.md",sourceDirName:"rust-programming",slug:"/rust-programming/Guessing-Game-Example-Code",permalink:"/docs/rust-programming/Guessing-Game-Example-Code",editUrl:"https://github.com/jzhou59/jzhou59.github.io/tree/source/docs/rust-programming/3_Guessing-Game-Example-Code.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:'"Hello Rust" Code Example',permalink:"/docs/rust-programming/Hello-Rust"},next:{title:"Common concepts presented in Rust",permalink:"/docs/rust-programming/Common-Coding-Concepts"}},c={},p=[],l={toc:p};function g(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"guessing-game-example-code"},"Guessing Game Example Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Rust"},'use rand::Rng; // random number generator from crate rand\nuse std::cmp::Ordering; // compare from std lib\nuse std::io; // io from std lib\n\nfn main() {\n    println!("Guess the number.");\n\n    let secret_number = rand::thread_rng().gen_range(1..101); // generate a random number from [0,101)\n\n    loop { // loop the guessing\n        println!("Please input a number:");\n\n        let mut guess_number = String::new();\n        io::stdin()\n            .read_line(&mut guess_number)\n            .expect("Error happens when input.");\n\n        let guess_number = guess_number.trim(); // remove space before and after string\n        if guess_number.ends_with("quit") { // check whether inputed string is quit\n            break;\n        }\n\n        let input: u32 = match guess_number.parse() { // convert string to unsigned 32 integer | catch exception\n            Ok(number) => number, // return normal result which is the u32 integer\n            Err(_) => { // catch every exception\n                println!("Invalid number!");\n                continue;\n            }\n        }; // every exception is a Result Enum having to variants: Ok and Err\n\n        match input.cmp(&secret_number) { // compare two integers\' value\n            Ordering::Less => println!("Too Small!"),\n            Ordering::Equal => {\n                println!("You win!");\n                break;\n            }\n            Ordering::Greater => println!("Too Big!"),\n        }\n    }\n}\n')))}g.isMDXComponent=!0}}]);