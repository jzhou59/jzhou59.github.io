"use strict";(self.webpackChunkjunjiezhou=self.webpackChunkjunjiezhou||[]).push([[2186],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(t),c=a,f=d["".concat(l,".").concat(c)]||d[c]||m[c]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2445:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],p={sidebar_position:5},l="Common concepts presented in Rust",s={unversionedId:"rust-programming/Common-Coding-Concepts",id:"rust-programming/Common-Coding-Concepts",title:"Common concepts presented in Rust",description:"vars and mutability",source:"@site/docs/rust-programming/4_Common-Coding-Concepts.md",sourceDirName:"rust-programming",slug:"/rust-programming/Common-Coding-Concepts",permalink:"/docs/rust-programming/Common-Coding-Concepts",editUrl:"https://github.com/jzhou59/jzhou59.github.io/tree/source/docs/rust-programming/4_Common-Coding-Concepts.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Guessing Game Example Code",permalink:"/docs/rust-programming/Guessing-Game-Example-Code"},next:{title:"Fitbit Web API Subscription and Nutrition API Extension",permalink:"/docs/gsoc-2022/intro"}},u={},m=[{value:"vars and mutability",id:"vars-and-mutability",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Scalar Type",id:"scalar-type",level:3},{value:"Compound Type",id:"compound-type",level:3}],d={toc:m};function c(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"common-concepts-presented-in-rust"},"Common concepts presented in Rust"),(0,i.kt)("h2",{id:"vars-and-mutability"},"vars and mutability"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"variables")," : a symbol for a 'thing'"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"immutable")," : an immutable means the value inside variables cannot be changed, it is default for every variables"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"mut")," : when a variable need to be mutable, it must be clearly stated"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"const")," : constant"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"shadowing")," : a variable could refer to something else by using ",(0,i.kt)("inlineCode",{parentName:"p"},"let [var]")," again, to be noted, inside-scope shadowing will not affect the var outside the scope"),(0,i.kt)("h2",{id:"data-types"},"Data Types"),(0,i.kt)("h3",{id:"scalar-type"},"Scalar Type"),(0,i.kt)("p",null,"Rust has four scalar types: ",(0,i.kt)("inlineCode",{parentName:"p"},"integers"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"float point"),",  ",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Character"),"."),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"integers"),", there are serveral types: ",(0,i.kt)("inlineCode",{parentName:"p"},"i8"),",",(0,i.kt)("inlineCode",{parentName:"p"},"i16"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"i32"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"i64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"i128"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"isize"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"u8"),",",(0,i.kt)("inlineCode",{parentName:"p"},"u16"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"u32"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"u64"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"u128"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"usize"),". Among them, ",(0,i.kt)("inlineCode",{parentName:"p"},"i")," means signed integer, ",(0,i.kt)("inlineCode",{parentName:"p"},"u"),"means unsigned integer, ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," means the size is depended by OS."),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"float point"),", there are two types: ",(0,i.kt)("inlineCode",{parentName:"p"},"f64")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"f32"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"f64")," is recommended."),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean"),", the symbol is ",(0,i.kt)("inlineCode",{parentName:"p"},"bool"),". It uses one byte"),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"Character"),", the symbole is ",(0,i.kt)("inlineCode",{parentName:"p"},"char"),", it is different from most langs. Rust uses four bytes for a character and one character actually means an Unicode, meaning ",(0,i.kt)("inlineCode",{parentName:"p"},"emoji")," is supported, yeah."),(0,i.kt)("h3",{id:"compound-type"},"Compound Type"),(0,i.kt)("p",null,"There are two compound types, ",(0,i.kt)("inlineCode",{parentName:"p"},"tuple")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"array"),"."),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"tuple"),", there are a piece of code representing traditional usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Rust"},'    let tup: (i32, f64, u8) = (500, 6.4, 1);\n\n    let tup = (500, 6.4, 1);\n\n    println!("The value of tupe are: {}, {}, and {}", tup.0, tup.1, tup.2);\n\n    let (x, y, z) = tup;\n\n    println!("The value of y is: {}", y);\n')),(0,i.kt)("p",null,"Data types inside a tuple should not be the same."),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"array"),", there are a piece of code representing tradditional usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Rust"},'    let arr : [u32;  5] = [0,1,2,3,4];\n    let mut index = String::new();\n    io::stdin().read_line(&mut index).expect("Failed to read");\n    let index : usize = index.trim().parse().expect("Input is not a valid number.");\n    println!("The index {} value of arr is {}", index, arr[index]);\n')),(0,i.kt)("p",null,"Data types inside an array should be the same, and length of an array should be fixed."),(0,i.kt)("p",null,"The index type of an array should be ",(0,i.kt)("inlineCode",{parentName:"p"},"usize"),"."),(0,i.kt)("p",null,"To make the most use of an array, try ",(0,i.kt)("inlineCode",{parentName:"p"},"vector"),"."))}c.isMDXComponent=!0}}]);